{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<div class=\\\"country-wrap\\\">\\n  <div>\\n    Gas\\n    <input type=\\\"text\\\"  [value]=\\\"gas\\\" (input)=\\\"gas = $event.target.value\\\" />\\n    Oil\\n    <input type=\\\"text\\\"  [value]=\\\"oil\\\" (input)=\\\"oil = $event.target.value\\\" />\\n    Cooling Liquid\\n    <input type=\\\"text\\\"  [value]=\\\"coolingLiquid\\\" (input)=\\\"coolingLiquid = $event.target.value\\\" />\\n  </div>\\n  <div>\\n    <button (click)=\\\"isKeyIn = true\\\" >Put The Key In!</button>\\n    <button (click)=\\\"ignite()\\\"  [disabled]=\\\"isKeyIn === false\\\" >Ignite!</button>\\n    <button (click)=\\\"start()\\\" [disabled]=\\\"!isKeyIn || !ignited\\\" >Move The Car!</button>\\n    <button (click)=\\\"stop()\\\" [disabled]=\\\"!isKeyIn || !ignited\\\">Stop The Car!</button>\\n  </div>\\n\\t<div class=\\\"sun\\\"></div>\\n\\t<div class=\\\"grass\\\"></div>\\n\\t<div class=\\\"street\\\">\\n\\t\\t<div class=\\\"car\\\" [ngClass]=\\\"{'running' : isRunning}\\\" >\\n\\t\\t<div class=\\\"car-body\\\">\\n\\t\\t\\t<div class=\\\"car-top-back\\\">\\n\\t\\t\\t\\t<div class=\\\"back-curve\\\"></div>\\n\\t\\t\\t</div>\\n\\t\\t\\t<div class=\\\"car-gate\\\"></div>\\n\\t\\t\\t<div class=\\\"car-top-front\\\">\\n\\t\\t\\t\\t<div class=\\\"wind-sheild\\\"></div>\\n\\t\\t\\t</div>\\n\\t\\t\\t<div class=\\\"bonet-front\\\"></div>\\n\\t\\t\\t<div class=\\\"stepney\\\"></div>\\n\\t\\t</div>\\n\\t\\t<div class=\\\"boundary-tyre-cover\\\">\\n\\t\\t\\t<div class=\\\"boundary-tyre-cover-back-bottom\\\"></div>\\n\\t\\t\\t<div class=\\\"boundary-tyre-cover-inner\\\"></div>\\n\\t\\t</div>\\n\\t\\t<div class=\\\"tyre-cover-front\\\">\\n\\t\\t\\t<div class=\\\"boundary-tyre-cover-inner-front\\\"></div>\\n\\t\\t</div>\\n\\t\\t<div class=\\\"base-axcel\\\">\\n\\n\\t\\t</div>\\n\\t\\t<div class=\\\"front-bumper\\\"></div>\\n\\t\\t<div class=\\\"tyre\\\" [ngClass]=\\\"{'running' : isRunning}\\\">\\n\\t\\t\\t<div class=\\\"gap\\\"></div>\\n\\t\\t</div>\\n\\t\\t<div class=\\\"tyre front\\\" [ngClass]=\\\"{'running' : isRunning}\\\">\\n\\t\\t\\t<div class=\\\"gap\\\"></div>\\n\\t\\t</div>\\n\\t\\t<div class=\\\"car-shadow\\\"></div>\\n\\t</div>\\n\\t</div>\\n\\t<div class=\\\"street-stripe\\\"></div>\\n\\t<div class=\\\"hill\\\">\\n\\t</div>\\n\\n</div>\\n\"","import { Component } from \"@angular/core\";\n\n@Component({\n  selector: \"app-root\",\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.css\"]\n})\nexport class AppComponent {\n  title = \"car-runner\";\n\n  ignited = false;\n  isRunning = false;\n  gas = 0;\n  oil = 0;\n  coolingLiquid = 0;\n  isKeyIn = false;\n\n  runningInterval;\n  ignite() {\n    if (\n      !this.isKeyIn ||\n      this.gas === 0 ||\n      this.oil === 0 ||\n      this.coolingLiquid === 0\n    ) {\n      alert(\"This car can't start! Probably there's no gas or oil!\");\n    } else {\n      this.ignited = true;\n    }\n  }\n\n  start() {\n    if (this.ignited && this.gas > 0 && this.oil > 0) {\n      this.isRunning = true;\n    } else {\n      this.ignited = false;\n      alert(\"OOps we run out of fuel or oil!\");\n    }\n    this.runningInterval = setInterval(() => {\n      if (this.isRunning) {\n        this.gas = this.gas - 1;\n        this.oil = this.oil - 0.01;\n\n        // stop the car if run out of gas or oil\n        if (this.gas === 0 || this.oil === 0) {\n          this.ignited = false;\n          this.isRunning = false;\n          this.runningInterval = undefined;\n        }\n      }\n    }, 1000);\n  }\n\n  stop() {\n    this.runningInterval = undefined;\n    this.isRunning = false;\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}